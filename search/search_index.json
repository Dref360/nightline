{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p> Nightline is a modern Event Listening framework based on Pydantic. </p> <p>Supports:</p> <ul> <li>\u2705 AWS Simple Queue Service (SQS)</li> <li>\ud83d\udea7 Google PubSub</li> <li>\ud83d\udea7 RabbitMQ</li> </ul> <p>Submit an issue for more integrations!</p>"},{"location":"#example","title":"Example","text":"<pre><code>from nightline.services.sqs import AWSSQSEventStreamListener\nfrom pydantic import BaseModel\n\nclass OrderMessage(BaseModel):\n    order_id: int\n    total: float\n    items: list[str]\n\n\nlistener = AWSSQSEventStreamListener(queue_url=\"https://your_queue_url\")\n\n\ndef process_message(message: OrderMessage):\n    print(f\"Processing order {message.order_id}\")\n\nlistener.listen(process_message)\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install nightline[sqs] # For SQS Support\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please check our GitHub repository for guidelines.</p>"},{"location":"#support","title":"Support","text":"<p>For support, please open an issue on GitHub.</p>"},{"location":"#inspirations","title":"Inspirations","text":"<p>This project has been heavily inspired by FastAPI, we couldn't have done it without them.</p>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#overview","title":"Overview","text":"<p>Nightline is a Python library designed to simplify event streaming and message processing, with a focus on making AWS SQS (and others) event handling straightforward and efficient.</p>"},{"location":"getting_started/#installation","title":"Installation","text":"<p>Install Nightline using pip:</p> <pre><code>pip install nightline\n</code></pre>"},{"location":"getting_started/#quick-start","title":"Quick Start","text":""},{"location":"getting_started/#basic-usage","title":"Basic Usage","text":"<p>Here's a simple example of how to use Nightline to listen to an SQS queue and process messages:</p> <pre><code>from nightline.services.sqs import AWSSQSEventStreamListener\nfrom pydantic import BaseModel\n\n# Define your message model\nclass OrderMessage(BaseModel):\n    order_id: int\n    total: float\n    items: list[str]\n\n# Create a listener for your SQS queue\nlistener = AWSSQSEventStreamListener(queue_url=\"https://your_queue_url\")\n\n# Define a message processing function\ndef process_message(message: OrderMessage):\n    print(f\"Processing order {message.order_id}\")\n    # Add your message processing logic here\n\n# Start listening for messages\nlistener.listen(process_message)\n</code></pre>"},{"location":"getting_started/#configuration","title":"Configuration","text":"<p>Nightline allows you to customize the event stream listener with a configuration object:</p> <pre><code>from nightline.services.sqs import AWSSQSEventStreamListener, EventStreamConfig\n\n# Create a custom configuration\nconfig = EventStreamConfig(\n    max_workers=4,           # Increase concurrent processors\n    max_messages=20,         # Retrieve more messages per batch\n    wait_time_seconds=30,    # Longer polling interval\n    auto_ack=True            # Automatically acknowledge processed messages\n)\n\n# Create listener with custom configuration\nlistener = AWSSQSEventStreamListener(\n    queue_url=\"https://your_queue_url\", \n    config=config\n)\n</code></pre>"},{"location":"getting_started/#configuration-options","title":"Configuration Options","text":"<p>The <code>EventStreamConfig</code> allows you to fine-tune your event stream processing:</p> <ul> <li><code>max_workers</code>: Controls the number of concurrent message processors</li> <li>Default: 2</li> <li> <p>Increases parallelism for faster message processing</p> </li> <li> <p><code>max_messages</code>: Limits the number of messages retrieved in a single batch</p> </li> <li>Default: 10</li> <li> <p>Helps manage memory and processing load</p> </li> <li> <p><code>wait_time_seconds</code>: Sets the long polling wait time for message retrieval</p> </li> <li>Default: 20 seconds</li> <li> <p>Reduces API calls and improves responsiveness</p> </li> <li> <p><code>auto_ack</code>: Determines automatic message acknowledgment</p> </li> <li>Default: True</li> <li>When enabled, successfully processed messages are automatically removed from the queue</li> </ul>"},{"location":"getting_started/#best-practices","title":"Best Practices","text":"<ol> <li>Message Model: Always use a well-defined Pydantic model to validate incoming messages</li> <li>Error Handling: Implement robust error handling in your <code>process_message</code> function</li> <li>Logging: Add logging to track message processing and potential issues</li> <li>Scalability: Adjust <code>max_workers</code> based on your processing requirements</li> </ol>"},{"location":"getting_started/#advanced-usage","title":"Advanced Usage","text":"<p>For more complex scenarios, you can perform custom error handling:</p> <pre><code>from nightline.services.sqs import AWSSQSEventStreamListener\nimport logging\n\ndef on_error(error: Exception, message: dict):\n        logging.error(f\"Failed to process message: {error}\")\n        # Implement custom error handling logic\n\nlistener = AWSSQSEventStreamListener(queue_url=\"https://your_queue_url\")\nlistener.listen(process_message, error_handler=on_error)\n</code></pre>"},{"location":"getting_started/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10+</li> <li>AWS SDK for Python (Boto3)</li> <li>Pydantic</li> </ul>"},{"location":"getting_started/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Ensure AWS credentials are properly configured</li> <li>Check queue URL and permissions</li> <li>Verify message format matches your defined model</li> </ul>"},{"location":"getting_started/#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please check our GitHub repository for guidelines.</p>"},{"location":"getting_started/#license","title":"License","text":"<p>This package is released under Apache V2.</p>"}]}